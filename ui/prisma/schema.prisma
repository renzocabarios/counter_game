// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  posts     Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
}


// Player model
model Player {
  address       String    @id // EVM address as primary key, unique
  id            String    @unique @db.VarChar(8) // 8-character custom ID
  createdAt     DateTime  @default(now())
  referredBy    String?   @map("referred_by") // EVM address of referrer
  referrals     Player[]  @relation("Referrals") // Players this player referred
  referrer      Player?   @relation("Referrals", fields: [referredBy], references: [address]) // The referrer
  referralCount Int       @default(0) @map("referral_count") // Total number of referrals
  tasks         Task[]    // Tasks completed by this player
  points        Int       @default(0) // Total points earned from tasks

  @@index([referredBy]) // Index for faster referral lookups
}

// Task model
model Task {
  id          Int      @id @default(autoincrement())
  player      Player   @relation(fields: [playerAddress], references: [address])
  playerAddress String @map("player_address")
  title       String
  description String?
  type        TaskType
  points      Int      @default(0) // Points awarded for completing this task
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  completedAt DateTime?

  @@index([playerAddress])
}

// Enum for task types
enum TaskType {
  DAILY
  WEEKLY
}